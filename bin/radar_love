#!/usr/bin/env bash
# set -euo pipefail

# shellcheck disable=SC2034
VERSION="2.8.0"
DESCRIPTION="auto-seeding secret scanning demos"
SCRIPT_NAME=$(basename "$0")

# --- COLOR & FORMAT DEFINITIONS ---
color_reset=$'\e[0m'
color_red=$'\e[31m'
color_green=$'\e[32m'
color_yellow=$'\e[33m'
color_blue=$'\e[34m'
color_magenta=$'\e[35m'
color_cyan=$'\e[36m'
color_bold=$'\e[1m'
color_status=$'\e[37m'

shake_on=$'\e[5m'
shake_off=$'\e[25m'

# --- EMOJI ---
icon_ok="‚òÅÔ∏è"
icon_err="‚ùå"
icon_warn="‚ö†Ô∏è"
icon_folder="üìÅ"
icon_branch="üå±"
icon_push="üöÄ"
icon_copy="üìã"
icon_git="üîß"
icon_lock="üîí"
icon_pr="üîÄ"
icon_step="‚û°Ô∏è"
icon_done="üèÅ"

# --- Try RADAR_LOVE_HOME env override first, then Homebrew, then local dev path ---
if [[ -n "${RADAR_LOVE_HOME:-}" && -d "$RADAR_LOVE_HOME/core" ]]; then
  BASE_DIR="$RADAR_LOVE_HOME"
elif command -v brew &>/dev/null && HOMEBREW_PREFIX="$(brew --prefix radar-love-cli 2>/dev/null)" && [[ -d "$HOMEBREW_PREFIX/share/radar-love-cli/core" ]]; then
  BASE_DIR="$HOMEBREW_PREFIX/share/radar-love-cli"
else
  BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

SCRIPTS_FOLDER="$BASE_DIR/core"
TEMPLATE_FOLDER="$BASE_DIR/templates"
BIN_DIR="$BASE_DIR/bin"

source "$SCRIPTS_FOLDER/vault_radar_quotes_helper.sh"

ARG1="${1:-}"

# -------- üìÑ Key files (Filenames only!) --------
FLAG_VALIDATOR="vault_radar_validator.sh"
FILE_BUILDER="vault_radar_builder.sh"
FILE_INPUT="vault_radar_input.json"
FILE_HEADER="header.tpl"
FILE_FOOTER="footer.tpl"
FILE_README="README.tpl"
FILE_SCENARIO_TEMPLATE="vault_radar_scenarios.tpl"

# ----------- EARLY HANDLERS (must exit immediately!) -----------
# Block misuse of --destroy as a flag
if [[ " $* " =~ " --destroy " ]]; then
  echo "‚ùå Error: Use the subcommand 'destroy', not '--destroy'."
  echo "   Example: ./radar_love destroy --repo-name Wonderwall --yes"
  exit 1
fi

# Handle destroy/destruct/destruction as a subcommand
if [[ "${1:-}" == "destroy" ]]; then
  shift
  exec "$SCRIPTS_FOLDER/vault_radar_destruction.sh" "$@"
  exit 0
elif [[ "${1:-}" =~ ^destruct ]]; then
  echo "‚ùå Error: The correct subcommand is 'destroy', not '${1}'."
  echo "   Example: ./radar_love destroy --repo-name Wonderwall --yes"
  exit 1
fi

# Handle --version
if [[ "${1:-}" == "--version" ]]; then
  echo "$SCRIPT_NAME v$VERSION ‚Äî auto-seeding secret scanning demos"
  exit 0
fi

# Handle --help
if [[ "${1:-}" == "--help" ]]; then
cat <<EOF
Radar Love CLI ‚Äî Secret Scanning Demo Pipeline
Version: $VERSION

Usage:
  ./radar_love [flags]
  ./radar_love destroy --repo-name <name> [--yes] [--quiet]

üö¶ Interactive Mode:
  No flags? We'll guide you step-by-step to set up a new demo project.

üéõÔ∏è Flags:
    --repo-name <name>      Project/repo name (required for destroy)
    --create true|false     Create/connect GitHub repo (default: true)
    --fresh true|false      Remove and recreate if exists (default: false)
    --build true|false      Generate demo leak branch/files (default: false)
    --commit true|false     Run commit_gh.sh after build (default: false)
    --request true|false    Trigger PR scan (default: false)
    --merge-main            Merge demo/leaky branch into main after all steps
    --status                Only show current Git status and exit
    --language <lang>       Demo language (default: bash)
    --scenario <scenario>   Demo scenario (default: AWS)
    --validate              Check dependencies and required tools
    --debug [compact]       Print parsed flags; use "compact" for inline
    --quiet                 Suppress banner/progress output
    --help                  Show this message and exit
    --version               Show version and exit

üí° Examples:
  ./radar_love --create true --repo-name "Wonderwall" --build true
  ./radar_love destroy --repo-name Wonderwall --yes

üö® Danger Zone ‚Äî Destruction:
  destroy                Delete BOTH your local folder & GitHub demo repo.
    --repo-name <name>   (required) Specify which repo/folder to delete
    --yes                Skip *all* confirmations (CAUTION!)
    --quiet              Suppress output for CI/automation

Notes:
  - The destroy subcommand *must* use --repo-name and confirms by default.
    ‚úÖ - Allowed:     ./radar_love destroy --repo-name X
    ‚ùå - Not allowed: ./radar_love --destroy --repo-name X
  - Case-sensitive: Type the exact repo name (dashes/casing) to confirm destruction.
  - Use --quiet for less output (e.g. CI/CD pipelines).
  - Most flags default to 'false' unless specified.

üé∂ "I'm not like you... I was born on a different Cloud." ‚Äî Oasis
EOF
  exit 0
fi

# Handle --validate / --deps (explicit validation, not the wizard)
if [[ "${1:-}" == "--validate" || "${1:-}" == "--deps" ]]; then
  VALIDATOR_SCRIPT="$SCRIPTS_FOLDER/validate_env.sh"
  if [[ ! -x "$VALIDATOR_SCRIPT" ]]; then
    echo "‚ùå Missing or not executable: $VALIDATOR_SCRIPT"
    exit 1
  fi
  if bash "$VALIDATOR_SCRIPT"; then
    echo -e "\n‚úÖ Environment looks good."
    exit 0
  else
    echo -ne "\n‚ùì Do you want to install missing required tools now? [y/N]: "
    read -r answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
      echo ""
      bash "$VALIDATOR_SCRIPT" --install-missing --yes
    else
      echo -e "\nüö´ Skipped installation. Exiting."
    fi
    exit 0
  fi
fi

# --- Utility Functions ---
check_github_auth() {
  if ! gh auth status &>/dev/null; then
    fail "GitHub CLI is not authenticated. Please run 'gh auth login' before continuing."
  else
    ok "GitHub CLI authentication verified."
  fi
}

# ----------- DECISION TREE HANDOFF IF NEEDED -----------
ACTION_FLAGS=(
  --create
  --repo-name
  --build
  --commit
  --request
  --merge-main
  --fresh
  --language
  --scenario
  --status
  --quiet
  --debug
  --validate
  --destroy
  --yes
)
HAS_ACTION_FLAG="false"
HAS_DRY_RUN="false"

for arg in "$@"; do
  for flag in "${ACTION_FLAGS[@]}"; do
    if [[ "$arg" == "$flag" ]]; then
      HAS_ACTION_FLAG="true"
      break 2
    fi
  done
  [[ "$arg" == "--dry-run" ]] && HAS_DRY_RUN="true"
done

# If NO action flags, run the interactive decision tree, then exit
if [[ "$HAS_ACTION_FLAG" == "false" ]]; then
  if [[ "$HAS_DRY_RUN" == "true" ]]; then
    exec "$SCRIPTS_FOLDER/vault_radar_decision_tree.sh" --dry-run
  else
    exec "$SCRIPTS_FOLDER/vault_radar_decision_tree.sh"
  fi
fi

# -------- üõ°Ô∏è Gitignore precedence --------
GITIGNORE_SOURCES=("$SCRIPTS_FOLDER/.gitignore" "$HOME/.gitignore_global")

# --- Load Flag Validator ---
if [[ -f "$SCRIPTS_FOLDER/$FLAG_VALIDATOR" ]]; then
  source "$SCRIPTS_FOLDER/$FLAG_VALIDATOR"
else
  echo "‚ùå Missing validator: $SCRIPTS_FOLDER/$FLAG_VALIDATOR"
  exit 1
fi

# üõ°Ô∏è Safe default values to prevent "unbound variable" issues
declare -A FLAGS

# üõ°Ô∏è Safe default values to prevent "unbound variable" issues
FLAGS[quiet]=false
FLAGS[debug]=false
FLAGS[build]=false
FLAGS[create]=true
FLAGS[fresh]=false
FLAGS[commit]=false
FLAGS[request]=false
FLAGS[merge_main]=false
FLAGS[status]=false
FLAGS[destroy]=false
FLAGS[repo_name]=""
FLAGS[scenario]=""

parse_flags() {
  local -n FLAGS_REF=$1
  shift # Shift out "FLAGS" so only real CLI flags remain

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --repo-name)
      FLAGS_REF[repo_name]="$2"
      shift 2
      ;;
    --build)
      FLAGS_REF[build]="${2:-true}"
      shift 2
      ;;
    --create)
      FLAGS_REF[create]="${2:-true}"
      shift 2
      ;;
    --fresh)
      FLAGS_REF[fresh]="${2:-false}"
      shift 2
      ;;
    --commit)
      FLAGS_REF[commit]="${2:-false}"
      shift 2
      ;;
    --request)
      FLAGS_REF[request]="${2:-false}"
      shift 2
      ;;
    --language)
      FLAGS_REF[language]="$2"
      shift 2
      ;;
    --debug)
      FLAGS_REF[debug]="true"
      shift
      ;;
    --quiet)
      FLAGS_REF[quiet]="true"
      shift
      ;;
    --status)
      FLAGS_REF[status]="true"
      shift
      ;;
    --destroy)
      FLAGS_REF[destroy]="true"
      shift
      ;;
    --merge-main)
      FLAGS_REF[merge_main]="true"
      shift
      ;;
    --scenarios | --scenario)
      FLAGS_REF[scenarios]="$2"
      shift 2
      ;;
    *)
      if [[ "${FLAGS_REF[quiet]}" != "true" ]]; then
        echo "‚ùå Unknown flag: $1"
      fi
      exit 1 # üî• Fail on unknown flag
      ;;
    esac
  done
}

# -------- Logging / Output --------
log() { echo "${color_status}${icon_step} $*${color_reset}"; }
ok() { echo "${color_bold}${color_green}${icon_ok} $*${color_reset}"; }
warn() { echo "${color_bold}${color_yellow}${icon_warn} $*${color_reset}"; }
fail() {
  echo "${color_bold}${color_red}${shake_on}${icon_err} $*${shake_off}${color_reset}"
  exit 1
}
banner() { echo -e "\n${color_cyan}${color_bold}==== $* ====${color_reset}"; }

# -------- Progress Bar --------
progress() {
  local pct="$1"
  local bar=""
  local n=$((pct / 10))
  for i in $(seq 1 10); do
    if [ "$i" -le "$n" ]; then bar="${bar}#"; else bar="${bar}-"; fi
  done
  printf "${color_green}[%-10s] %3d%%%s\r" "$bar" "$pct" "$color_reset"
  if [ "$pct" -eq 100 ]; then echo; fi
}

# --- Run parsing and validation ---
parse_flags FLAGS "$@"
validate_flags FLAGS

# -------- CONFIGURATION --------
RAW_REPO_NAME="${FLAGS[repo_name]:-Definitely_Maybe}"
REPO_NAME=$(to_title_kebab_case "$RAW_REPO_NAME")

DIR="$(pwd)"
PROJECT_FOLDER="$DIR/$REPO_NAME"

GH_USER="$(gh api user --jq .login)"

CREATE=true
BUILD=false
FRESH=false
COMMIT=false
REQUEST=false

LANGUAGE="bash"
SCENARIO="AWS"

# -------- Set values from FLAGS --------
CREATE="${FLAGS[create]:-true}"
BUILD="${FLAGS[build]:-false}"
FRESH="${FLAGS[fresh]:-false}"
LANGUAGE="${FLAGS[language]:-bash}"
SCENARIO="${FLAGS[scenario]:-AWS}"
COMMIT="${FLAGS[commit]:-false}"
REQUEST="${FLAGS[request]:-false}"
DEBUG="${FLAGS[debug]:-false}"
QUIET="${FLAGS[quiet]:-false}"
STATUS="${FLAGS[status]:-false}"

# -------- 666 --------
if [[ "$DEBUG" == "true" ]]; then
  echo -e "‚ÑπÔ∏è  ‚öôÔ∏è  Parsed and validated flags:"
  for key in "${!FLAGS[@]}"; do
    printf "  ‚Üí %-8s = %s\n" "$key" "${FLAGS[$key]}"
  done | sort
  echo -e "‚ÑπÔ∏è  ‚úÖ All flags validated successfully.\n"
fi

# -------- Clean Existing Project Folder If Needed --------
if [[ "$FRESH" == "true" && -d "$PROJECT_FOLDER" ]]; then
  warn "‚úó The folder '$PROJECT_FOLDER' already exists."
  rm -rf "$PROJECT_FOLDER"
  ok "Removed $PROJECT_FOLDER. Starting fresh."
fi

# -------- Ensure Project Folder Exists --------
mkdir -p "$PROJECT_FOLDER"

# -------- Early Exit: Git Status Only --------
if [[ "${FLAGS[status]}" == "true" ]]; then
  echo -e "\n==== üîç Git Status Only (--status mode) ===="

  if [[ -d "$PROJECT_FOLDER/.git" ]]; then
    pushd "$PROJECT_FOLDER" >/dev/null
    git status
    popd >/dev/null
  else
    echo "‚ùå No git repository found at $PROJECT_FOLDER"
    exit 1
  fi

  exit 0
fi

# -------- Copy .gitignore --------
copy_gitignore() {
  for src in "${GITIGNORE_SOURCES[@]}"; do
    if [[ -f "$src" ]]; then
      cp "$src" "$PROJECT_FOLDER/.gitignore"
      ok "Copied .gitignore from $src"
      return
    fi
  done
  echo "# Auto-generated .gitignore for Radar Love" >"$PROJECT_FOLDER/.gitignore"
  warn "No .gitignore template found, created a default."
}

# -------- Copy Input Files --------
copy_inputs() {
  banner "${icon_copy} Copying input files..."
  for file in "$FILE_BUILDER" "$FILE_INPUT" "$FILE_HEADER" "$FILE_FOOTER" "$FILE_SCENARIO_TEMPLATE"; do
    local src="$SCRIPTS_FOLDER/$file"
    local dst="$PROJECT_FOLDER/$file"
    [[ -f "$src" ]] || fail "Source file not found: $src"
    log "${icon_copy} Copying $file"
    cp "$src" "$dst"
    [[ "$file" == "$FILE_BUILDER" ]] && chmod +x "$dst"
    ok "Copied $file"
  done
}

generate_readme_from_template() {
  local template="$SCRIPTS_FOLDER/README.tpl"
  local output="$PROJECT_FOLDER/README.md"

  if [[ ! -f "$template" ]]; then
    warn "README.tpl not found, skipping README generation."
    return
  fi

  awk -v repo="$REPO_NAME" -v dt="$(date '+%Y-%m-%d')" '
    {
      gsub("{{REPO_NAME}}", repo);
      gsub("{{DATE}}", dt);
      print;
    }
  ' "$template" >"$output"

  ok "Generated README.md from template: $template"
}

copy_docs_and_license() {
  for file in README.md LICENSE; do
    local src="$SCRIPTS_FOLDER/$file"
    local dst="$PROJECT_FOLDER/$file"
    if [[ -f "$src" ]]; then
      cp "$src" "$dst"
      ok "Copied $file from $src"
    else
      if [[ "$file" == "README.md" ]]; then
        generate_readme_from_template
      elif [[ "$file" == "LICENSE" ]]; then
        echo "MIT License" >"$dst"
        warn "No LICENSE found; created placeholder."
      fi
    fi
  done
}

generate_vault_scenarios_md() {
  local INPUT_JSON="$PROJECT_FOLDER/vault_radar_input.json"
  local OUTPUT_MD="$PROJECT_FOLDER/vault-scenarios.md"
  local TEMPLATE="$PROJECT_FOLDER/vault_radar_scenarios.tpl"
  local GEN_SCRIPT="$SCRIPTS_FOLDER/vault_generate_scenarios_md.sh"

  if [[ -x "$GEN_SCRIPT" && -f "$INPUT_JSON" && -f "$TEMPLATE" ]]; then
    log "${icon_step} Generating vault-scenarios.md..."
    "$GEN_SCRIPT" --input "$INPUT_JSON" --output "$OUTPUT_MD" --template "$TEMPLATE"
    ok "Generated vault-scenarios.md in $PROJECT_FOLDER"
  else
    warn "Scenario doc not generated (missing script or input/template)."
  fi
}

# -------- Pre-commit hook for sanity_check --------
setup_precommit_hook() {
  local HOOK_PATH="$PROJECT_FOLDER/.git/hooks/pre-commit"
  if command -v sanity_check &>/dev/null; then
    cat >"$HOOK_PATH" <<'EOF'
#!/bin/bash
set -euo pipefail
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.sh$|\.py$|\.js$|\.tf$|Dockerfile$' || true)
if [[ -n "$STAGED_FILES" ]]; then
  echo "üîç Pre-commit: running sanity_check on staged files..."
  echo "$STAGED_FILES" | xargs sanity_check --fix --quiet
fi
EOF
    chmod +x "$HOOK_PATH"
    ok "Pre-commit hook for sanity_check installed."
  else
    warn "sanity_check not available, skipping pre-commit hook setup."
  fi
}

maybe_init_git() {
  banner "${icon_git} Checking git repository..."
  cd "$PROJECT_FOLDER"
  if [[ ! -d .git ]]; then
    log "No git repo found‚Äîinitializing."
    git init
    git branch -M main 2>/dev/null || true
    git add .
    git commit -m "Initial commit"
    ok "Git repo initialized and first commit done."
  elif [[ -z "$(git rev-parse --show-cdup 2>/dev/null)" && -z "$(git log --oneline)" ]]; then
    log "Git repo found but no commits. Making initial commit."
    git add .
    git commit -m "Initial commit"
    ok "First commit done."
  else
    ok "Git repo already initialized."
  fi
  setup_precommit_hook
  cd - >/dev/null
}

create_repo() {
  banner "${icon_folder} Creating GitHub repo..."
  cd "$PROJECT_FOLDER"
  maybe_init_git
  log "Creating repo: $GH_USER/$REPO_NAME"
  gh repo create "$GH_USER/$REPO_NAME" --public --source "$PROJECT_FOLDER" --remote=origin --push || warn "Repo may already exist, continuing."
  git branch -M main
  git push -u origin main
  ok "Repo created and pushed: https://github.com/$GH_USER/$REPO_NAME"
  remove_branch_protection
  cd - >/dev/null
}

remove_branch_protection() {
  banner "${icon_lock} Removing branch protection (if any)..."
  gh api --method DELETE "repos/$GH_USER/$REPO_NAME/branches/main/protection" >/dev/null 2>&1 || true
  ok "Branch protection (if any) removed (silent)."
}

build_leaky_branch() {
  local branch="feature/leaky-demo"
  banner "${icon_branch} Building leaky demo branch..."
  cd "$PROJECT_FOLDER"
  git checkout -B "$branch"
  if [[ -f "./$FILE_BUILDER" ]]; then
    ./"$FILE_BUILDER" \
      --language "$LANGUAGE" \
      --scenario "$SCENARIO" \
      --header-template "$FILE_HEADER" \
      --footer-template "$FILE_FOOTER"
    git add radar_demo/Vault_Radar_trigger.*
    git commit -m "Add Vault Radar demo leak file"
    ok "Added demo leaks with $FILE_BUILDER"
  else
    mkdir -p radar_demo
    echo "AWS_ACCESS_KEY_ID=AKIA7SDF3R28QXLN4WTY" >radar_demo/leak.env
    echo "AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYkq8RxCjJ" >>radar_demo/leak.env
    git add radar_demo/leak.env
    git commit -m "Add static leaky secret for demo"
    warn "$FILE_BUILDER not found, added static secret"
  fi
  git push -u origin "$branch"
  ok "Leaky branch pushed: $branch"
  cd - >/dev/null
}

# -------- Version bump (multi-lang aware) --------
run_bump_version() {
  cd "$PROJECT_FOLDER"
  # Check for all generated radar_demo trigger files (.sh, .py, etc)
  for file in radar_demo/Vault_Radar_trigger.*; do
    [[ -f "$file" ]] || continue
    if command -v bump_version &>/dev/null; then
      banner "${icon_step} Running version bump on $file"
      bump_version "$file" && ok "Version bump done: $file"
    else
      warn "Skipping version bump; bump_version not found."
    fi
  done
  cd - >/dev/null
}

run_sanity_check() {
  cd "$PROJECT_FOLDER"
  for file in radar_demo/Vault_Radar_trigger.*; do
    [[ -f "$file" ]] || continue
    if command -v sanity_check &>/dev/null; then
      banner "${icon_step} Running sanity_check on $file"
      sanity_check "$file" --fix --report
      ok "sanity_check completed: $file"
    else
      warn "sanity_check not found; skipping sanity check."
    fi
  done
  cd - >/dev/null
}

# ...after run_bump_version and run_sanity_check...

auto_commit_generated_files() {
  cd "$PROJECT_FOLDER"
  # Add all outputs that are modified or created
  git add radar_demo/Vault_Radar_trigger.* radar_demo/CHANGELOG_Vault_Radar_trigger.md radar_demo/Vault_Radar_cleanup.sh sanity_check.md 2>/dev/null || true
  # Only commit if there are staged changes
  if ! git diff --cached --quiet; then
    git commit -m "chore: update trigger file(s), changelog, and sanity report"
    ok "Auto-committed latest outputs."
    git push
  fi
  cd - >/dev/null
}

commit_gh_if_needed() {
  banner "${icon_git} Running commit_gh after build and checks..."
  cd "$PROJECT_FOLDER"
  if command -v commit_gh &>/dev/null; then
    commit_gh --tree false
    ok "commit_gh executed"
  else
    warn "commit_gh not found; skipping."
  fi
  cd - >/dev/null
}

trigger_pr_and_scan() {
  cd "$PROJECT_FOLDER" || fail "Project folder not found!"
  banner "${icon_pr} Triggering PR scan..."

  if command -v trigger_git_scan &>/dev/null; then
    trigger_git_scan --cleanup
    ok "trigger_git_scan (global) executed"
  elif [[ -f "./trigger_git_scan.sh" ]]; then
    ./trigger_git_scan.sh --cleanup
    ok "trigger_git_scan.sh (local) executed"
  else
    warn "trigger_git_scan not found; skipping PR scan trigger."
  fi

  cd - >/dev/null
}

clean_install_files() {
  local files=(header.tpl footer.tpl vault_radar_scenarios.tpl vault_radar_builder.sh vault_radar_input.json)
  local removed=()
  cd "$PROJECT_FOLDER"

  # Always try to remove the files from git
  git rm -f "${files[@]}" 2>/dev/null || true

  # Remove locally if present (extra safety)
  for f in "${files[@]}"; do
    if [[ -f "$f" ]]; then
      rm -f "$f"
      removed+=("$f")
    fi
  done

  # If any files were staged for removal, commit
  if ! git diff --cached --quiet; then
    ok "Cleaned up scaffold files (and removed from Git): ${files[*]}"
    git commit -m "chore: remove scaffold/seed files post-setup"
    git push
  fi

  cd - >/dev/null
}

cleanup_files_in_branch() {
  local branch="$1"
  git checkout "$branch"
  git pull origin "$branch"
  git rm -f header.tpl footer.tpl vault_radar_scenarios.tpl vault_radar_builder.sh vault_radar_input.json || true
  if ! git diff --cached --quiet; then
    git commit -m "chore: remove scaffold/seed files from $branch"
    git push origin "$branch"
  fi
}

auto_merge_to_main() {
  local branch="feature/leaky-demo"
  cd "$PROJECT_FOLDER"
  # Make sure we're up to date
  git checkout main
  git pull origin main
  git checkout "$branch"
  git pull origin "$branch"

  # Merge (no-ff to preserve branch history)
  git checkout main
  git merge --no-ff "$branch" -m "Merge demo output from $branch"
  git push origin main

  cd - >/dev/null
}

# -------- MAIN --------
banner "${icon_push}${icon_ok}${icon_branch} $REPO_NAME: Cloudy Modular Secret Demo Pipeline!"

progress 5
check_github_auth

progress 9
copy_gitignore

progress 10
copy_inputs

progress 11
copy_docs_and_license
generate_vault_scenarios_md

progress 20
$CREATE && create_repo

progress 60
$BUILD && build_leaky_branch

progress 70
$BUILD && run_bump_version

progress 80
$BUILD && run_sanity_check

progress 85
$BUILD && auto_commit_generated_files

progress 90
$COMMIT && commit_gh_if_needed

progress 95
clean_install_files

# Only clean from main if this is the initial setup, or user confirms
if git show-ref --verify --quiet refs/heads/main; then
  cleanup_files_in_branch main
fi

# Optional: Only merge if a flag is set (for now, always merges for demo)
auto_merge_to_main

progress 99
$REQUEST && trigger_pr_and_scan

progress 100
sleep 2
progress 100

echo -e "${color_green}${color_bold}${icon_done} All steps complete. Your ‚òÅÔ∏è demo repo is ready to challenge every scanner!${color_reset}"

# Optional: Show a link to the repo and PR scan (if desired)
if [[ "$REQUEST" == "true" ]]; then
  echo -e "\n${color_blue}üîó View your repo: https://github.com/$GH_USER/$REPO_NAME ${color_reset}"
  echo -e "${color_cyan}Check your PRs for scan results!${color_reset}"
fi

# Oasis-style repo status check
cd "$PROJECT_FOLDER"
echo ""
git status --short | grep . &&
  echo -e "${color_red}‚ùå I need some time in the sunshine!${color_reset}" ||
  echo -e "${color_green}üé∂ In my mind my dreams are real üé∏.${color_reset}"
cd - >/dev/null
